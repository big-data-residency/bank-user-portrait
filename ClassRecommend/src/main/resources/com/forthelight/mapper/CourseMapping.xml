<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.forthelight.dao.CourseDao">

	<select id="getAllTeachersByCourseId" parameterType="int"
		resultType="Teacher">
		select * from teacher where id = #{id}
	</select>

	<resultMap type="Course" id="CourseResultMap"
		autoMapping="true">
		<id property="id" column="id" />

		<association property="college" column="collegeid"
			javaType="College" autoMapping="true">
			<id property="id" column="cid" />
			<result property="deleteStatus" column="cdeleteStatus" />
		</association>

		<association property="major" column="majorid"
			javaType="Major" autoMapping="true">
			<id property="id" column="mid" />
			<result property="collegeid" column="mcollegeid" />
			<result property="deleteStatus" column="mdeleteStatus" />
		</association>

		<association property="teacher" column="teacherid"
			javaType="Teacher" autoMapping="true">
			<id property="id" column="tid" />
			<result property="collegeid" column="tcollegeid" />
			<result property="deleteStatus" column="tdeleteStatus" />
		</association>
	</resultMap>

	<select id="findById" parameterType="int"
		resultMap="CourseResultMap">
		select *, College.id cid , Major.id mid , Teacher.id tid , 
		College.deleteStatus cdeleteStatus , Major.deleteStatus mdeleteStatus , Teacher.deleteStatus tdeleteStatus
		from Course inner join 
		( ( College inner join Major on collegeid = College.id ) inner join Teacher on Teacher.Collegeid = College.id )
		on Course.teacherId = Teacher.id and Course.collegeId = College.id and Course.majorId = Major.id
		where Course.id = #{id} and 
		College.deleteStatus = 0 and Major.deleteStatus = 0 and Teacher.deleteStatus = 0 and Course.deleteStatus = 0
	</select>
	
	<select id="findByCode" parameterType="String"
		resultMap="CourseResultMap">
		select *, College.id cid , Major.id mid , Teacher.id tid , 
		College.deleteStatus cdeleteStatus , Major.deleteStatus mdeleteStatus , Teacher.deleteStatus tdeleteStatus
		from Course inner join 
		( ( College inner join Major on collegeid = College.id ) inner join Teacher on Teacher.Collegeid = College.id )
		on Course.teacherId = Teacher.id and Course.collegeId = College.id and Course.majorId = Major.id
		where Course.courseCode = #{courseCode} and 
		College.deleteStatus = 0 and Major.deleteStatus = 0 and Teacher.deleteStatus = 0 and Course.deleteStatus = 0
	</select>
	
	<select id="findByCourseName" parameterType="String" resultMap="CourseResultMap" >
	    select *, College.id cid , Major.id mid , Teacher.id tid , 
		College.deleteStatus cdeleteStatus , Major.deleteStatus mdeleteStatus , Teacher.deleteStatus tdeleteStatus
		from Course inner join 
		( ( College inner join Major on collegeid = College.id ) inner join Teacher on Teacher.Collegeid = College.id )
		on Course.teacherId = Teacher.id and Course.collegeId = College.id and Course.majorId = Major.id
		where Course.courseName = #{courseName} and
		College.deleteStatus = 0 and Major.deleteStatus = 0 and Teacher.deleteStatus = 0 and Course.deleteStatus = 0
	</select>
	
	<select id="findByTeacherName" parameterType="Teacher" resultMap="CourseResultMap" >
	    select *, College.id cid , Major.id mid , Teacher.id tid , 
		College.deleteStatus cdeleteStatus , Major.deleteStatus mdeleteStatus , Teacher.deleteStatus tdeleteStatus
		from Course inner join 
		( ( College inner join Major on collegeid = College.id ) inner join Teacher on Teacher.Collegeid = College.id )
		on Course.teacherId = Teacher.id and Course.collegeId = College.id and Course.majorId = Major.id
		where Teacher.teacherName = #{teacherName} and
		College.deleteStatus = 0 and Major.deleteStatus = 0 and Teacher.deleteStatus = 0 and Course.deleteStatus = 0
	</select>
	
	<select id="findByLevel" parameterType="String" resultMap="CourseResultMap" >
	    select *, College.id cid , Major.id mid , Teacher.id tid , 
		College.deleteStatus cdeleteStatus , Major.deleteStatus mdeleteStatus , Teacher.deleteStatus tdeleteStatus
		from Course inner join 
		( ( College inner join Major on collegeid = College.id ) inner join Teacher on Teacher.Collegeid = College.id )
		on Course.teacherId = Teacher.id and Course.collegeId = College.id and Course.majorId = Major.id
		where Course.Level = #{level} and
		College.deleteStatus = 0 and Major.deleteStatus = 0 and Teacher.deleteStatus = 0 and Course.deleteStatus = 0
	</select> 
	
	<select id="findAll" parameterType="String" resultMap="CourseResultMap" >
	    select *, College.id cid , Major.id mid , Teacher.id tid , 
		College.deleteStatus cdeleteStatus , Major.deleteStatus mdeleteStatus , Teacher.deleteStatus tdeleteStatus
		from Course inner join 
		( ( College inner join Major on collegeid = College.id ) inner join Teacher on Teacher.Collegeid = College.id )
		on Course.teacherId = Teacher.id and Course.collegeId = College.id and Course.majorId = Major.id where
		College.deleteStatus = 0 and Major.deleteStatus = 0 and Teacher.deleteStatus = 0 and Course.deleteStatus = 0
	</select>
	
	<update id="update" parameterType="Course" >
	    update Course set CourseCode = #{courseCode} , CourseName = #{courseName} , teacherId = #{teacher}.getId() ,
	    studentNumber = #{studentNumber} , startWeek = #{startWeek} , endWeek = #{endWeek} , startLesson = #{startLesson} ,
	    endLesson = #{endLesson} , isSingleWeek = #{isSingleWeek} , credit = #{credit} , examiningForm = #{examingForm} ,
	    collegeid = #{college}.getId() , majorid = #{major}.getId() , teacherid = #{teacher}.getId()
	    where id = #{id}
	    <!-- level/levelId ?  -->
	    <!-- examingForm? examiningForm? -->
	</update>
	
	<update id="delete" parameterType="Course" >
	    update Course set deleteStatus = 1 where id = #{id}
	</update>
	
	<insert id="insert" parameterType="Course" >
	    insert into Course values(null,#{courseCode},#{courseName},#{teacher}.getId(),#{studentNumber},)
	</insert>

</mapper>